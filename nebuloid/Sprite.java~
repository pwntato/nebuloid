package nebuloid;

import java.awt.Image;
import java.awt.Rectangle;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.Toolkit;

import java.util.Date;

//interface that makes things drawable
public class Sprite
{
	//upper left coord
	int x = 0;
	int y = 0;
	int angle = 0;
	
	boolean visible = false;
	
	//dimensions
	int height = 0;
	int width = 0;
	
	Rectangle rect = new Rectangle(x, y, width, height);
	
	//let ALL objects explode :)
	Image explosion = Toolkit.getDefaultToolkit().getImage(Ship.class.getResource("/images/explosion.png"));
	long explosion_time = 1000;
	long exploded_at = 0;
	int explode_width = 10;
	int explode_height = 10;
	
	//current ship image
	Image image;
	
	public boolean isExploding()
	{
		return (exploded_at > 0);
	}
	
	//set the object exploding
	public void explode()
	{
		exploded_at = (new Date()).getTime();
	}
	
	public void move_explosion()
	{
		//show explosion
		if (exploded_at > 0)
		{
			long time = (new Date()).getTime();
			
			if (time >= exploded_at + explosion_time)
				visible = false;
			else
			{
				double explode_ratio = (time - exploded_at) / (double)explosion_time;
				
				explode_width = (int)(explode_ratio * (width * 1.5));
				explode_height = (int)(explode_ratio * (width * 1.5));
			}
		}
	}
	
	//upper left coords
	public int getX()
	{
		return x;
	}
	
	public int getY()
	{
		return y;
	}
	
	//coords of center
	public int centerX()
	{
		return x + (width/2);
	}
	
	public int centerY()
	{
		return y + (height/2);
	}
	
	//set Sprites center position 
	public void setPos(int x, int y)
	{
		this.x = x - (width/2);
		this.y = y - (height/2);
	}
	
	//gets bounding rectangle
	public Rectangle getRect()
	{
		rect.setRect(x, y, width, height);
		return rect;
	}
	
	//moves the sprite one frame
	public void move()
	{
	}
	
	//draws the sprite
	public void draw(Graphics2D g2d, Rectangle view)
	{
		if (getVisible())
		{
			//to restore default transform
			AffineTransform saveTrans = g2d.getTransform();
			int x = getX() - (int)view.getX();
			int y = getY() - (int)view.getY();
		
			//only rotate if angle != 0
			if (getAngle() != 0)
			{
				AffineTransform trans = new AffineTransform();
		
				trans.rotate(Math.toRadians(getAngle()), x + (getWidth()/2), y + (getHeight()/2));
		
				g2d.setTransform(trans);	
			}
		
			g2d.drawImage(getImage(), x, y, getWidth(), getHeight(), null);
		
			g2d.setTransform(saveTrans);
			
			if (exploded_at > 0)
			{
				g2d.drawImage(explosion, 
							centerX() - (explode_width/2) - (int)view.getX(), 
							centerY() - (explode_height/2) - (int)view.getY(), 
							explode_width, 
							explode_height, null);
			}
		}
	}
	
	//returns the current image to display
	public Image getImage()
	{
		return image;
	}
	
	//returns dimensions
	public int getWidth()
	{
		return width;
	}
	
	public int getHeight()
	{
		return height;
	}
	
	//get or set angle
	public int getAngle()
	{
		return angle;
	}
	
	public void setAngle(int angle)
	{
		this.angle = angle;
	}
	
	//get or set visible
	public boolean getVisible()
	{
		return visible;
	}
	
	void setVisible(boolean visible)
	{
		this.visible = visible;
	}
}
